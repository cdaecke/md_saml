# ============================= #
# Configuration for EXT:md_saml #
# ============================= #

plugin.tx_mdsaml {
  settings {
    mdsamlSpBaseUrl =

    // SAML-Metadata should be public available without Typo3-BE-Login
    publicMetadata = false

    // Backend users
    be_users {
      // Identifier of the SP entity  (must be a URI)
      // ATTENTION: `mdsamlSpBaseUrl` will be attached automatically
      saml.sp.entityId = /typo3/index.php?loginProvider=1648123062&mdsamlmetadata
      saml.sp.assertionConsumerService.url = /typo3/index.php?loginProvider=1648123062&login-provider=md_saml&login_status=login&acs

      // Decide whether a new backend user should be created
      createIfNotExist = 1

      // Decide whether to update a existing backend user with new data
      updateIfExist = 1


      transformationArr {
        username = http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname
        email = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
        realName = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
      }

      databaseDefaults {
        #usergroup = 1
        #lang = de
        #db_mountpoints = 1
        #file_mountpoints = 1
      }
    }

    // Frontend users
    fe_users {
      active = {$plugin.tx_mdsaml.settings.fe_users.active}
      // Identifier of the SP entity  (must be a URI)
      // ATTENTION: `mdsamlSpBaseUrl` will be attached automatically
      // Example (just replace the speaking path ("/login/") according to your needs): `/login/?loginProvider=1648123062&mdsamlmetadata`
      saml.sp.entityId =

      // Example (just replace the speaking path ("/login/") according to your needs): `/login/?loginProvider=1648123062&login-provider=md_saml&login_status=login&acs&logintype=login`
      saml.sp.assertionConsumerService.url =

      // if enable login is detected from url above, "?loginProvider=1648123062&login-provider=md_saml&login_status=login&acs&logintype=login" not needed)
      saml.sp.assertionConsumerService.auto = 0

      // Decide whether a new frontend user should be created
      createIfNotExist = 1

      // Decide whether to update a existing frontend user with new data
      updateIfExist = 1

      // Configuration of the returning parameters of the SSO.
      // This array will be merged with `beUser.databaseDefaults`.
      transformationArr {
        username = http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname
        email = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
        name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/displayname
        first_name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
        last_name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
      }

      // This section allows you to set defaults for a newly created frontend users
      // You can add all fields of the database here
      databaseDefaults {
        #pid = 1
        #usergroup = 1
      }
    }

    // This holds the whole SAML configuration
    // For more details on the configuration see https://github.com/onelogin/php-saml
    saml {
      // If 'strict' is True, then the PHP Toolkit will reject unsigned
      // or unencrypted messages if it expects them signed or encrypted
      // Also will reject the messages if not strictly follow the SAML
      // standard: Destination, NameId, Conditions ... are validated too.
      strict = true

      // Enable debug mode (to print errors)
      debug = false

      // Set a BaseURL to be used instead of try to guess
      // the BaseURL of the view that process the SAML Message.
      // Ex. http://sp.example.com/
      // http://example.com/sp/
      baseurl < plugin.tx_mdsaml.settings.mdsamlSpBaseUrl

      // Service Provider Data that we are deploying
      // *******************************************
      sp {
        // Identifier of the SP entity  (must be a URI)
        // ATTENTION: `mdsamlSpBaseUrl` will be attached automatically
        entityId = /typo3/index.php?loginProvider=1648123062&mdsamlmetadata

        // Specifies info about where and how the <AuthnResponse> message MUST be
        // returned to the requester, in this case our SP.
        assertionConsumerService {
          // URL Location where the <Response> from the IdP will be returned
          // ATTENTION: `mdsamlSpBaseUrl` will be attached automatically
          url = /typo3/index.php?loginProvider=1648123062&login-provider=md_saml&login_status=login&acs

          // SAML protocol binding to be used when returning the <Response>
          // message.  Onelogin Toolkit supports for this endpoint the
          // HTTP-POST binding only
          binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST
        }

        // If you need to specify requested attributes, set a
        // attributeConsumingService. nameFormat, attributeValue and
        // friendlyName can be omitted. Otherwise remove this section.
        attributeConsumingService {
          serviceName = SP MdSaml,
          serviceDescription = SAML Service of ext:md_saml
          requestedAttributes {
            10 {
              name =
              isRequired = false
              nameFormat =
              friendlyName =
              attributeValue =
            }
          }
        }

        // Specifies info about where and how the <Logout Response> message MUST be
        // returned to the requester, in this case our SP.
        singleLogoutService {
          // URL Location where the <Response> from the IdP will be returned
          // ATTENTION: `mdsamlSpBaseUrl` will be attached automatically
          url = /index.php?loginProvider=1648123062&sls

          // SAML protocol binding to be used when returning the <Response>
          // message.  Onelogin Toolkit supports for this endpoint the
          // HTTP-Redirect binding only
          binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
        }

        // Specifies constraints on the name identifier to be used to
        // represent the requested subject.
        // Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
        NameIDFormat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

        // Usually x509cert and privateKey of the SP are provided by files placed at
        // the certs folder. But we can also provide them with the following parameters
        x509cert =
        privateKey =

        /*
        * Key rollover
        * If you plan to update the SP x509cert and privateKey
        * you can define here the new x509cert and it will be
        * published on the SP metadata so Identity Providers can
        * read them and get ready for rollover.
        */
        // x509certNew =
      } // end sp


      // Identity Provider Data that we want connect with our SP
      // *******************************************************
      idp {
        // Identifier of the IdP entity  (must be a URI)
        entityId =

        // SSO endpoint info of the IdP. (Authentication Request protocol)
        singleSignOnService {
          // URL Target of the IdP where the SP will send the Authentication Request Message
          url =

          // SAML protocol binding to be used when returning the <Response>
          // message.  Onelogin Toolkit supports for this endpoint the
          // HTTP-Redirect binding only
          binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
        }

        // SLO endpoint info of the IdP.
        singleLogoutService {
          // URL Location of the IdP where the SP will send the SLO Request
          url =

          // URL location of the IdP where the SP SLO Response will be sent (ResponseLocation)
          // if not set, url for the SLO Request will be used
          responseUrl =

          // SAML protocol binding to be used when returning the <Response>
          // message.  Onelogin Toolkit supports for this endpoint the
          // HTTP-Redirect binding only
          binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
        }

        // Public x509 certificate of the IdP
        x509cert =

        /*
        *  Instead of use the whole x509cert you can use a fingerprint in
        *  order to validate the SAMLResponse, but we don't recommend to use
        *  that method on production since is exploitable by a collision
        *  attack.
        *  (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
        *   or add for example the -sha256 , -sha384 or -sha512 parameter)
        *
        *  If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
        *  let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
        *  'sha1' is the default value.
        */
        // certFingerprint =
        // certFingerprintAlgorithm = sha1

        /* In some scenarios the IdP uses different certificates for
        * signing/encryption, or is under key rollover phase and more
        * than one certificate is published on IdP metadata.
        * In order to handle that the toolkit offers that parameter.
        * (when used, 'x509cert' and 'certFingerprint' values are
        * ignored).
        */
        // x509certMulti {
        //   signing {
        //     0 = cert1-string
        //   }
        //   encryption {
        //     0 = cert2-string
        //   }
        // }
      }

      // ADVANCED SETTINGS
      //******************

      // Compression settings
      // Handle if the getRequest/getResponse methods will return the Request/Response deflated.
      // But if we provide a $deflate boolean parameter to the getRequest or getResponse
      // method it will have priority over the compression settings.
      compress {
        requests = true
        responses = true
      }

      // Security settings
      security {

        // signatures and encryptions offered

        // Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
        // will be encrypted.
        nameIdEncrypted = false

        // Indicates whether the <samlp:AuthnRequest> messages sent by this SP
        // will be signed.              [The Metadata of the SP will offer this info]
        authnRequestsSigned = false

        // Indicates whether the <samlp:logoutRequest> messages sent by this SP
        // will be signed.
        logoutRequestSigned = false

        // Indicates whether the <samlp:logoutResponse> messages sent by this SP
        // will be signed.
        logoutResponseSigned = false

        /* Sign the Metadata
        False || True (use sp certs) || array (
        'keyFileName' => 'metadata.key',
        'certFileName' => 'metadata.crt'
        )
        || array (
        'x509cert' => '',
        'privateKey' => ''
        )
        */
        signMetadata = false


        // signatures and encryptions required

        // Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
        // <samlp:LogoutResponse> elements received by this SP to be signed.
        wantMessagesSigned = false

        // Indicates a requirement for the <saml:Assertion> elements received by
        // this SP to be encrypted.
        wantAssertionsEncrypted = false

        // Indicates a requirement for the <saml:Assertion> elements received by
        // this SP to be signed.        [The Metadata of the SP will offer this info]
        wantAssertionsSigned = false

        // Indicates a requirement for the NameID element on the SAMLResponse received
        // by this SP to be present.
        wantNameId = true

        // Indicates a requirement for the NameID received by
        // this SP to be encrypted.
        wantNameIdEncrypted = false

        // Authentication context.
        // Set to false and no AuthContext will be sent in the AuthNRequest,
        // Set true or don't present this parameter and you will get an AuthContext 'exact' 'urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport'
        // Set an array with the possible auth context values: array('urn:oasis:names:tc:SAML:2.0:ac:classes:Password', 'urn:oasis:names:tc:SAML:2.0:ac:classes:X509'),
        requestedAuthnContext = false

        // Allows the authn comparison parameter to be set, defaults to 'exact' if
        // the setting is not present.
        requestedAuthnContextComparison = exact

        // Indicates if the SP will validate all received xmls.
        // (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
        wantXMLValidation = true

        // If true, SAMLResponses with an empty value at its Destination
        // attribute will not be rejected for this fact.
        relaxDestinationValidation = false

        // If true, the toolkit will not raised an error when the Statement Element
        // contain atribute elements with name duplicated
        allowRepeatAttributeName = false

        // If true, Destination URL should strictly match to the address to
        // which the response has been sent.
        // Notice that if 'relaxDestinationValidation' is true an empty Destintation
        // will be accepted.
        destinationStrictlyMatches = false

        // If true, SAMLResponses with an InResponseTo value will be rejectd if not
        // AuthNRequest ID provided to the validation method.
        rejectUnsolicitedResponsesWithInResponseTo = false

        // Algorithm that the toolkit will use on signing process. Options:
        //    'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
        //    'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
        // Notice that rsa-sha1 is a deprecated algorithm and should not be used
        signatureAlgorithm = http://www.w3.org/2001/04/xmldsig-more#rsa-sha256

        // Algorithm that the toolkit will use on digest process. Options:
        //    'http://www.w3.org/2000/09/xmldsig#sha1'
        //    'http://www.w3.org/2001/04/xmlenc#sha256'
        //    'http://www.w3.org/2001/04/xmldsig-more#sha384'
        //    'http://www.w3.org/2001/04/xmlenc#sha512'
        // Notice that sha1 is a deprecated algorithm and should not be used
        digestAlgorithm = http://www.w3.org/2001/04/xmlenc#sha256

        // Algorithm that the toolkit will use for encryption process. Options:
        // 'http://www.w3.org/2001/04/xmlenc#tripledes-cbc'
        // 'http://www.w3.org/2001/04/xmlenc#aes128-cbc'
        // 'http://www.w3.org/2001/04/xmlenc#aes192-cbc'
        // 'http://www.w3.org/2001/04/xmlenc#aes256-cbc'
        // 'http://www.w3.org/2009/xmlenc11#aes128-gcm'
        // 'http://www.w3.org/2009/xmlenc11#aes192-gcm'
        // 'http://www.w3.org/2009/xmlenc11#aes256-gcm';
        // Notice that aes-cbc are not consider secure anymore so should not be used
        encryption_algorithm = http://www.w3.org/2009/xmlenc11#aes128-gcm

        // ADFS URL-Encodes SAML data as lowercase, and the toolkit by default uses
        // uppercase. Turn it True for ADFS compatibility on signature verification
        lowercaseUrlencoding = false
      }

      // Contact information template, it is recommended to suply a technical and support contacts
      /*
      contactPerson {
        technical {
          givenName =
          emailAddress =
        }

        support {
          givenName =
          emailAddress =
        }
      }
      */

      // Organization information template, the info in en_US lang is recomended, add more if required
      /*
      organization {
        en-US {
          name =
          displayname =
          url =
        }
      }
      */

      /* Interoperable SAML 2.0 Web Browser SSO Profile [saml2int]   http://saml2int.org/profile/current
      'authnRequestsSigned' => false,    // SP SHOULD NOT sign the <samlp:AuthnRequest>,
      // MUST NOT assume that the IdP validates the sign
      'wantAssertionsSigned' => true,
      'wantAssertionsEncrypted' => true, // MUST be enabled if SSL/HTTPs is disabled
      'wantNameIdEncrypted' => false,
      */

    } // end saml

  }
}

# ============================= #
# Configuration for EXT:felogin #
# ============================= #
[{$plugin.tx_mdsaml.settings.fe_users.active} == 1]

  plugin.tx_felogin_login {
    view {
      templateRootPaths.100 = EXT:md_saml/Resources/Private/Templates/
      partialRootPaths.100 = EXT:md_saml/Resources/Private/Partials/
      layoutRootPaths.100 = EXT:md_saml/Resources/Private/Layouts/
    }

    # Add/modify the translation
    _LOCAL_LANG {
      default {
        legend = Single sign on
        #login = Login
      }
    }
  }

[end]
